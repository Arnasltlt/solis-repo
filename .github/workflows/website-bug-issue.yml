name: Website-triggered Bug Issue

on:
  repository_dispatch:
    types: [website-bug-issue]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-issue-and-tag-gemini:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Create Issue
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.client_payload?.title ?? 'Bug report from website';
            const body = context.payload.client_payload?.description ?? '';
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body: `Requested by website admin via automation.\n\n---\n\n${body}`,
              labels: ['from-web', 'auto-implement']
            });
            core.setOutput('number', issue.number.toString());

      - name: Ask Gemini to implement from Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_AUTOMATION_TOKEN }}
          script: |
            const issue_number = Number(process.env.ISSUE_NUMBER);
            const description = process.env.DESCRIPTION || '';
            const branch = `auto/issue-${issue_number}`;
            const prompt = [
              '/implement',
              'Please implement the following request from this Issue.',
              '',
              'Steps:',
              `- Create and work on branch: ${branch} from base: main`,
              '- Make the required code changes, commit, and push to the branch',
              `- Open a Pull Request to main referencing this Issue #${issue_number}`,
              '',
              'Request body:',
              '---',
              description
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body: prompt,
            });
        env:
          ISSUE_NUMBER: ${{ steps.issue.outputs.number }}
          DESCRIPTION: ${{ github.event.client_payload.description }}

      - name: Scaffold branch and placeholder commit
        run: |
          issue_num=${ISSUE_NUMBER}
          branch="auto/issue-${issue_num}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b "$branch" origin/main
          echo "This PR addresses Issue #${issue_num}.\n\nSummary:\n${DESCRIPTION}" > TASK.md
          git add TASK.md
          git commit -m "chore: scaffold PR for Issue #${issue_num}"
          git push "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "$branch"
        env:
          ISSUE_NUMBER: ${{ steps.issue.outputs.number }}
          DESCRIPTION: ${{ github.event.client_payload.description }}
          GH_TOKEN: ${{ secrets.PR_AUTOMATION_TOKEN }}

      - name: Open PR from scaffolded branch
        id: pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_AUTOMATION_TOKEN }}
          script: |
            const issue_number = Number(process.env.ISSUE_NUMBER);
            const head = `auto/issue-${issue_number}`;
            const base = 'main';
            const title = `Issue #${issue_number}: Implementation PR`;
            const body = `Scaffolded PR for Issue #${issue_number}.\n\nThis PR was created automatically to provide a branch for implementation.`;
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head,
              base,
              body,
              maintainer_can_modify: true,
            });
            core.setOutput('number', pr.number.toString());
        env:
          ISSUE_NUMBER: ${{ steps.issue.outputs.number }}

      - name: Ask Gemini on PR to implement
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_AUTOMATION_TOKEN }}
          script: |
            const pr_number = Number(process.env.PR_NUMBER);
            const description = process.env.DESCRIPTION || '';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: `@gemini-cli /implement ${description}`,
            });
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
          DESCRIPTION: ${{ github.event.client_payload.description }}


