name: Gemini CLI Assistant (Issue comments)

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  run-gemini-on-issue-comment:
    if: github.event.issue.pull_request == null && (contains(github.event.comment.body, '@gemini-cli') || contains(github.event.comment.body, '/implement') || contains(github.event.comment.body, '/gemini'))
    runs-on: ubuntu-latest
    steps:
      - name: Auth GH for git pushes
        run: |
          gh auth setup-git
        env:
          GH_TOKEN: ${{ secrets.PR_AUTOMATION_TOKEN }}
      - name: Extract prompt from comment
        id: info
        uses: actions/github-script@v7
        with:
          script: |
            const raw = (context.payload.comment.body || '').trim();
            let cleaned = raw;
            cleaned = cleaned.replace(/^@gemini-cli\s*/i, '');
            cleaned = cleaned.replace(/^\/implement\s*/i, '');
            cleaned = cleaned.replace(/^\/gemini\s*/i, '');
            core.setOutput('prompt', cleaned);

      - name: Run Gemini CLI with prompt
        id: gemini
        uses: google-github-actions/run-gemini-cli@v0.1.10
        with:
          prompt: ${{ steps.info.outputs.prompt }}
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
        env:
          GH_TOKEN: ${{ secrets.PR_AUTOMATION_TOKEN }}

      - name: Comment summary
        if: always()
        uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.gemini.outputs.summary }}
        with:
          script: |
            const summary = process.env.SUMMARY;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: summary ? `Gemini summary:\n\n${summary}` : 'Gemini run completed.'
            });
          result-encoding: string


